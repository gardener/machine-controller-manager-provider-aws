// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/gardener/machine-spec/cmi.proto

package cmi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PluginCapability_RPC_Type int32

const (
	// UNKNOWN is used to specific an capability beyond the set
	// provided below
	PluginCapability_RPC_UNKNOWN PluginCapability_RPC_Type = 0
	// CREATE_MACHINE tells that the plugin implements the
	// CreateMachine() RPC.
	// Plugin is REQUIRED to provide this capability.
	PluginCapability_RPC_CREATE_MACHINE PluginCapability_RPC_Type = 1
	// DELETE_MACHINE tells that the plugin implements the
	// DeleteMachine() RPC.
	// Plugin is REQUIRED to provide this capability.
	PluginCapability_RPC_DELETE_MACHINE PluginCapability_RPC_Type = 2
	// GET_MACHINE_STATUS tells that the plugin implements the
	// GetMachineStatus() RPC
	PluginCapability_RPC_GET_MACHINE_STATUS PluginCapability_RPC_Type = 3
	// LIST_MACHINES tells that the plugin implements the
	// ListMachines() RPC
	PluginCapability_RPC_LIST_MACHINES PluginCapability_RPC_Type = 4
	// SHUTDOWN_MACHINE tells that the plugin implements the
	// ShutDownMachine() RPC
	PluginCapability_RPC_SHUTDOWN_MACHINE PluginCapability_RPC_Type = 5
	// GET_VOLUME_IDS tells if the plugin
	// implements the GetVolumeIDs() RPC
	PluginCapability_RPC_GET_VOLUME_IDS PluginCapability_RPC_Type = 6
)

var PluginCapability_RPC_Type_name = map[int32]string{
	0: "UNKNOWN",
	1: "CREATE_MACHINE",
	2: "DELETE_MACHINE",
	3: "GET_MACHINE_STATUS",
	4: "LIST_MACHINES",
	5: "SHUTDOWN_MACHINE",
	6: "GET_VOLUME_IDS",
}
var PluginCapability_RPC_Type_value = map[string]int32{
	"UNKNOWN":            0,
	"CREATE_MACHINE":     1,
	"DELETE_MACHINE":     2,
	"GET_MACHINE_STATUS": 3,
	"LIST_MACHINES":      4,
	"SHUTDOWN_MACHINE":   5,
	"GET_VOLUME_IDS":     6,
}

func (x PluginCapability_RPC_Type) String() string {
	return proto.EnumName(PluginCapability_RPC_Type_name, int32(x))
}
func (PluginCapability_RPC_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{4, 0, 0}
}

type GetPluginInfoRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPluginInfoRequest) Reset()         { *m = GetPluginInfoRequest{} }
func (m *GetPluginInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetPluginInfoRequest) ProtoMessage()    {}
func (*GetPluginInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{0}
}
func (m *GetPluginInfoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginInfoRequest.Unmarshal(m, b)
}
func (m *GetPluginInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginInfoRequest.Marshal(b, m, deterministic)
}
func (dst *GetPluginInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginInfoRequest.Merge(dst, src)
}
func (m *GetPluginInfoRequest) XXX_Size() int {
	return xxx_messageInfo_GetPluginInfoRequest.Size(m)
}
func (m *GetPluginInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginInfoRequest proto.InternalMessageInfo

type GetPluginInfoResponse struct {
	// The name MUST follow domain name notation format
	// (https://tools.ietf.org/html/rfc1035#section-2.3.1). It SHOULD
	// include the plugin's host company name and the plugin name,
	// to minimize the possibility of collisions. It MUST be 63
	// characters or less, beginning and ending with an alphanumeric
	// character ([a-z0-9A-Z]) with dashes (-), dots (.), and
	// alphanumerics between.
	// This field is REQUIRED.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The version specifies the plugin version
	// Value of this field is opaque to the CMI-Client.
	// This field is REQUIRED.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// manifest contains a map of key-value pairs to pass
	// any additonal information about the plugin.
	// Values are opaque to the CMI-Client.
	// This field is OPTIONAL.
	Manifest             map[string]string `protobuf:"bytes,3,rep,name=manifest,proto3" json:"manifest,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetPluginInfoResponse) Reset()         { *m = GetPluginInfoResponse{} }
func (m *GetPluginInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetPluginInfoResponse) ProtoMessage()    {}
func (*GetPluginInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{1}
}
func (m *GetPluginInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginInfoResponse.Unmarshal(m, b)
}
func (m *GetPluginInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginInfoResponse.Marshal(b, m, deterministic)
}
func (dst *GetPluginInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginInfoResponse.Merge(dst, src)
}
func (m *GetPluginInfoResponse) XXX_Size() int {
	return xxx_messageInfo_GetPluginInfoResponse.Size(m)
}
func (m *GetPluginInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginInfoResponse proto.InternalMessageInfo

func (m *GetPluginInfoResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetPluginInfoResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *GetPluginInfoResponse) GetManifest() map[string]string {
	if m != nil {
		return m.Manifest
	}
	return nil
}

type GetPluginCapabilitiesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPluginCapabilitiesRequest) Reset()         { *m = GetPluginCapabilitiesRequest{} }
func (m *GetPluginCapabilitiesRequest) String() string { return proto.CompactTextString(m) }
func (*GetPluginCapabilitiesRequest) ProtoMessage()    {}
func (*GetPluginCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{2}
}
func (m *GetPluginCapabilitiesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginCapabilitiesRequest.Unmarshal(m, b)
}
func (m *GetPluginCapabilitiesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginCapabilitiesRequest.Marshal(b, m, deterministic)
}
func (dst *GetPluginCapabilitiesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginCapabilitiesRequest.Merge(dst, src)
}
func (m *GetPluginCapabilitiesRequest) XXX_Size() int {
	return xxx_messageInfo_GetPluginCapabilitiesRequest.Size(m)
}
func (m *GetPluginCapabilitiesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginCapabilitiesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginCapabilitiesRequest proto.InternalMessageInfo

type GetPluginCapabilitiesResponse struct {
	// All the capabilities that the controller service supports.
	// This field is OPTIONAL.
	Capabilities         []*PluginCapability `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetPluginCapabilitiesResponse) Reset()         { *m = GetPluginCapabilitiesResponse{} }
func (m *GetPluginCapabilitiesResponse) String() string { return proto.CompactTextString(m) }
func (*GetPluginCapabilitiesResponse) ProtoMessage()    {}
func (*GetPluginCapabilitiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{3}
}
func (m *GetPluginCapabilitiesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPluginCapabilitiesResponse.Unmarshal(m, b)
}
func (m *GetPluginCapabilitiesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPluginCapabilitiesResponse.Marshal(b, m, deterministic)
}
func (dst *GetPluginCapabilitiesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPluginCapabilitiesResponse.Merge(dst, src)
}
func (m *GetPluginCapabilitiesResponse) XXX_Size() int {
	return xxx_messageInfo_GetPluginCapabilitiesResponse.Size(m)
}
func (m *GetPluginCapabilitiesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPluginCapabilitiesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetPluginCapabilitiesResponse proto.InternalMessageInfo

func (m *GetPluginCapabilitiesResponse) GetCapabilities() []*PluginCapability {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

// Specifies a capability of the CMI-Plugin.
type PluginCapability struct {
	// Types that are valid to be assigned to Type:
	//	*PluginCapability_Rpc
	Type                 isPluginCapability_Type `protobuf_oneof:"type"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *PluginCapability) Reset()         { *m = PluginCapability{} }
func (m *PluginCapability) String() string { return proto.CompactTextString(m) }
func (*PluginCapability) ProtoMessage()    {}
func (*PluginCapability) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{4}
}
func (m *PluginCapability) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginCapability.Unmarshal(m, b)
}
func (m *PluginCapability) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginCapability.Marshal(b, m, deterministic)
}
func (dst *PluginCapability) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginCapability.Merge(dst, src)
}
func (m *PluginCapability) XXX_Size() int {
	return xxx_messageInfo_PluginCapability.Size(m)
}
func (m *PluginCapability) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginCapability.DiscardUnknown(m)
}

var xxx_messageInfo_PluginCapability proto.InternalMessageInfo

type isPluginCapability_Type interface {
	isPluginCapability_Type()
}

type PluginCapability_Rpc struct {
	Rpc *PluginCapability_RPC `protobuf:"bytes,1,opt,name=rpc,proto3,oneof"`
}

func (*PluginCapability_Rpc) isPluginCapability_Type() {}

func (m *PluginCapability) GetType() isPluginCapability_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *PluginCapability) GetRpc() *PluginCapability_RPC {
	if x, ok := m.GetType().(*PluginCapability_Rpc); ok {
		return x.Rpc
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PluginCapability) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PluginCapability_OneofMarshaler, _PluginCapability_OneofUnmarshaler, _PluginCapability_OneofSizer, []interface{}{
		(*PluginCapability_Rpc)(nil),
	}
}

func _PluginCapability_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PluginCapability)
	// type
	switch x := m.Type.(type) {
	case *PluginCapability_Rpc:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rpc); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PluginCapability.Type has unexpected type %T", x)
	}
	return nil
}

func _PluginCapability_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PluginCapability)
	switch tag {
	case 1: // type.rpc
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PluginCapability_RPC)
		err := b.DecodeMessage(msg)
		m.Type = &PluginCapability_Rpc{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PluginCapability_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PluginCapability)
	// type
	switch x := m.Type.(type) {
	case *PluginCapability_Rpc:
		s := proto.Size(x.Rpc)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PluginCapability_RPC struct {
	Type                 PluginCapability_RPC_Type `protobuf:"varint,1,opt,name=type,proto3,enum=cmi.v1.PluginCapability_RPC_Type" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *PluginCapability_RPC) Reset()         { *m = PluginCapability_RPC{} }
func (m *PluginCapability_RPC) String() string { return proto.CompactTextString(m) }
func (*PluginCapability_RPC) ProtoMessage()    {}
func (*PluginCapability_RPC) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{4, 0}
}
func (m *PluginCapability_RPC) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PluginCapability_RPC.Unmarshal(m, b)
}
func (m *PluginCapability_RPC) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PluginCapability_RPC.Marshal(b, m, deterministic)
}
func (dst *PluginCapability_RPC) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PluginCapability_RPC.Merge(dst, src)
}
func (m *PluginCapability_RPC) XXX_Size() int {
	return xxx_messageInfo_PluginCapability_RPC.Size(m)
}
func (m *PluginCapability_RPC) XXX_DiscardUnknown() {
	xxx_messageInfo_PluginCapability_RPC.DiscardUnknown(m)
}

var xxx_messageInfo_PluginCapability_RPC proto.InternalMessageInfo

func (m *PluginCapability_RPC) GetType() PluginCapability_RPC_Type {
	if m != nil {
		return m.Type
	}
	return PluginCapability_RPC_UNKNOWN
}

type ProbeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProbeRequest) Reset()         { *m = ProbeRequest{} }
func (m *ProbeRequest) String() string { return proto.CompactTextString(m) }
func (*ProbeRequest) ProtoMessage()    {}
func (*ProbeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{5}
}
func (m *ProbeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeRequest.Unmarshal(m, b)
}
func (m *ProbeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeRequest.Marshal(b, m, deterministic)
}
func (dst *ProbeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeRequest.Merge(dst, src)
}
func (m *ProbeRequest) XXX_Size() int {
	return xxx_messageInfo_ProbeRequest.Size(m)
}
func (m *ProbeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeRequest proto.InternalMessageInfo

type ProbeResponse struct {
	// Readiness allows a plugin to report its initialization status back
	// to the CMI-Client. Initialization for some plugins MAY be time consuming
	// and it is important for a CMI-Client to distinguish between the following
	// cases:
	//
	// 1) The plugin is in an unhealthy state and MAY need restarting. In
	//    this case a gRPC error code SHALL be returned.
	// 2) The plugin is still initializing, but is otherwise perfectly
	//    healthy. In this case a successful response SHALL be returned
	//    with a readiness value of `false`. Calls to the plugin's
	//    Machine services MAY fail due to an incomplete
	//    initialization state.
	// 3) The plugin has finished initializing and is ready to service
	//    calls to its Machine services. A successful
	//    response is returned with a readiness value of `true`.
	//
	// This field is OPTIONAL. If not present, the caller SHALL assume
	// that the plugin is in a ready state and is accepting calls to its
	// Machine services (according to the plugin's reported
	// capabilities).
	Ready                *wrappers.BoolValue `protobuf:"bytes,1,opt,name=ready,proto3" json:"ready,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ProbeResponse) Reset()         { *m = ProbeResponse{} }
func (m *ProbeResponse) String() string { return proto.CompactTextString(m) }
func (*ProbeResponse) ProtoMessage()    {}
func (*ProbeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{6}
}
func (m *ProbeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProbeResponse.Unmarshal(m, b)
}
func (m *ProbeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProbeResponse.Marshal(b, m, deterministic)
}
func (dst *ProbeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProbeResponse.Merge(dst, src)
}
func (m *ProbeResponse) XXX_Size() int {
	return xxx_messageInfo_ProbeResponse.Size(m)
}
func (m *ProbeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ProbeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ProbeResponse proto.InternalMessageInfo

func (m *ProbeResponse) GetReady() *wrappers.BoolValue {
	if m != nil {
		return m.Ready
	}
	return nil
}

type CreateMachineRequest struct {
	// MachineName is the name of the machine object CRD for whom a VM is to be created.
	// This field is REQUIRED.
	MachineName string `protobuf:"bytes,1,opt,name=MachineName,proto3" json:"MachineName,omitempty"`
	// ProviderSpec is the configuration needed to create a machine in bytes.
	// Plugin should parse this raw data into pre-defined spec in their respective projects.
	// This field is REQUIRED.
	ProviderSpec []byte `protobuf:"bytes,2,opt,name=ProviderSpec,proto3" json:"ProviderSpec,omitempty"`
	// Secrets is the map containing necessary credentials for cloud-provider to create the machine.
	// This field is OPTIONAL.
	Secrets map[string][]byte `protobuf:"bytes,3,rep,name=Secrets,proto3" json:"Secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// LastKnownState is any additional information (if required) that can used by the plugin.
	// It can be used by the plugin to recover from the last execution/error state.
	// Plugin should parse this raw data into it's desired format.
	// This field is OPTIONAL.
	LastKnownState       []byte   `protobuf:"bytes,4,opt,name=LastKnownState,proto3" json:"LastKnownState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMachineRequest) Reset()         { *m = CreateMachineRequest{} }
func (m *CreateMachineRequest) String() string { return proto.CompactTextString(m) }
func (*CreateMachineRequest) ProtoMessage()    {}
func (*CreateMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{7}
}
func (m *CreateMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMachineRequest.Unmarshal(m, b)
}
func (m *CreateMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMachineRequest.Marshal(b, m, deterministic)
}
func (dst *CreateMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMachineRequest.Merge(dst, src)
}
func (m *CreateMachineRequest) XXX_Size() int {
	return xxx_messageInfo_CreateMachineRequest.Size(m)
}
func (m *CreateMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMachineRequest proto.InternalMessageInfo

func (m *CreateMachineRequest) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *CreateMachineRequest) GetProviderSpec() []byte {
	if m != nil {
		return m.ProviderSpec
	}
	return nil
}

func (m *CreateMachineRequest) GetSecrets() map[string][]byte {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *CreateMachineRequest) GetLastKnownState() []byte {
	if m != nil {
		return m.LastKnownState
	}
	return nil
}

type CreateMachineResponse struct {
	// ProviderID is the unique identification of the VM at the cloud provider.
	// This could be the same/different from req.Name.
	// ProviderID typically matches with the node.Spec.ProviderID on the node object.
	// Eg: gce://project-name/region/vm-ID
	// This field is REQUIRED.
	ProviderID string `protobuf:"bytes,1,opt,name=ProviderID,proto3" json:"ProviderID,omitempty"`
	// NodeName is the name of the node-object registered to kubernetes.
	// This field is REQUIRED.
	NodeName string `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	// LastKnownState is any additional information (if required) that can used by the plugin.
	// It can be the final state of the executing call.
	// Could be used by the plugin to recover from the current execution/error state in any future calls.
	// Plugin should return a raw bytes string.
	// This field is OPTIONAL.
	LastKnownState       []byte   `protobuf:"bytes,3,opt,name=LastKnownState,proto3" json:"LastKnownState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateMachineResponse) Reset()         { *m = CreateMachineResponse{} }
func (m *CreateMachineResponse) String() string { return proto.CompactTextString(m) }
func (*CreateMachineResponse) ProtoMessage()    {}
func (*CreateMachineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{8}
}
func (m *CreateMachineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateMachineResponse.Unmarshal(m, b)
}
func (m *CreateMachineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateMachineResponse.Marshal(b, m, deterministic)
}
func (dst *CreateMachineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateMachineResponse.Merge(dst, src)
}
func (m *CreateMachineResponse) XXX_Size() int {
	return xxx_messageInfo_CreateMachineResponse.Size(m)
}
func (m *CreateMachineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateMachineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateMachineResponse proto.InternalMessageInfo

func (m *CreateMachineResponse) GetProviderID() string {
	if m != nil {
		return m.ProviderID
	}
	return ""
}

func (m *CreateMachineResponse) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *CreateMachineResponse) GetLastKnownState() []byte {
	if m != nil {
		return m.LastKnownState
	}
	return nil
}

type DeleteMachineRequest struct {
	// MachineName is the name of the machine object for which a VM is to be deleted.
	// This field is REQUIRED.
	MachineName string `protobuf:"bytes,1,opt,name=MachineName,proto3" json:"MachineName,omitempty"`
	// ProviderSpec is needed to filter VMs based a cluster before deleting.
	// Plugin should parse this raw data into pre-defined spec in their respective projects.
	// This field is REQUIRED.
	ProviderSpec []byte `protobuf:"bytes,2,opt,name=ProviderSpec,proto3" json:"ProviderSpec,omitempty"`
	// Secrets is the map containing necessary credentials for cloud-provider to delete the machine.
	// This field is OPTIONAL.
	Secrets map[string][]byte `protobuf:"bytes,3,rep,name=Secrets,proto3" json:"Secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// LastKnownState is any additional information (if required) that can used by the plugin.
	// It can be used by the plugin to recover from the last execution/error state.
	// Plugin should parse this raw data into it's desired format.
	// This field is OPTIONAL.
	LastKnownState       []byte   `protobuf:"bytes,4,opt,name=LastKnownState,proto3" json:"LastKnownState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMachineRequest) Reset()         { *m = DeleteMachineRequest{} }
func (m *DeleteMachineRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteMachineRequest) ProtoMessage()    {}
func (*DeleteMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{9}
}
func (m *DeleteMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMachineRequest.Unmarshal(m, b)
}
func (m *DeleteMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMachineRequest.Marshal(b, m, deterministic)
}
func (dst *DeleteMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMachineRequest.Merge(dst, src)
}
func (m *DeleteMachineRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteMachineRequest.Size(m)
}
func (m *DeleteMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMachineRequest proto.InternalMessageInfo

func (m *DeleteMachineRequest) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *DeleteMachineRequest) GetProviderSpec() []byte {
	if m != nil {
		return m.ProviderSpec
	}
	return nil
}

func (m *DeleteMachineRequest) GetSecrets() map[string][]byte {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *DeleteMachineRequest) GetLastKnownState() []byte {
	if m != nil {
		return m.LastKnownState
	}
	return nil
}

type DeleteMachineResponse struct {
	// LastKnownState is any additional information (if required) that can used by the plugin.
	// It can be the final state of the executing call.
	// Could be used by the plugin to recover from the current execution/error state in any future calls.
	// Plugin should return a raw bytes string.
	// This field is OPTIONAL.
	LastKnownState       []byte   `protobuf:"bytes,1,opt,name=LastKnownState,proto3" json:"LastKnownState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteMachineResponse) Reset()         { *m = DeleteMachineResponse{} }
func (m *DeleteMachineResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteMachineResponse) ProtoMessage()    {}
func (*DeleteMachineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{10}
}
func (m *DeleteMachineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteMachineResponse.Unmarshal(m, b)
}
func (m *DeleteMachineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteMachineResponse.Marshal(b, m, deterministic)
}
func (dst *DeleteMachineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteMachineResponse.Merge(dst, src)
}
func (m *DeleteMachineResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteMachineResponse.Size(m)
}
func (m *DeleteMachineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteMachineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteMachineResponse proto.InternalMessageInfo

func (m *DeleteMachineResponse) GetLastKnownState() []byte {
	if m != nil {
		return m.LastKnownState
	}
	return nil
}

type GetMachineStatusRequest struct {
	// MachineName is name of the machine object from which the VM is to be identified.
	// The plugin is responsible to issuing a get call for a VM backed by this machine name.
	// This field is REQUIRED.
	MachineName string `protobuf:"bytes,1,opt,name=MachineName,proto3" json:"MachineName,omitempty"`
	// ProviderSpec is needed to filter VMs based a cluster before getting the status.
	// Plugin should parse this raw data into pre-defined spec in their respective projects.
	// This field is REQUIRED.
	ProviderSpec []byte `protobuf:"bytes,2,opt,name=ProviderSpec,proto3" json:"ProviderSpec,omitempty"`
	// Secrets is the map containing necessary credentials for cloud-provider to list the machines.
	// This field is OPTIONAL.
	Secrets              map[string][]byte `protobuf:"bytes,3,rep,name=Secrets,proto3" json:"Secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GetMachineStatusRequest) Reset()         { *m = GetMachineStatusRequest{} }
func (m *GetMachineStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GetMachineStatusRequest) ProtoMessage()    {}
func (*GetMachineStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{11}
}
func (m *GetMachineStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMachineStatusRequest.Unmarshal(m, b)
}
func (m *GetMachineStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMachineStatusRequest.Marshal(b, m, deterministic)
}
func (dst *GetMachineStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMachineStatusRequest.Merge(dst, src)
}
func (m *GetMachineStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GetMachineStatusRequest.Size(m)
}
func (m *GetMachineStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMachineStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMachineStatusRequest proto.InternalMessageInfo

func (m *GetMachineStatusRequest) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *GetMachineStatusRequest) GetProviderSpec() []byte {
	if m != nil {
		return m.ProviderSpec
	}
	return nil
}

func (m *GetMachineStatusRequest) GetSecrets() map[string][]byte {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type GetMachineStatusResponse struct {
	// ProviderID is the unique identification of the VM at the cloud provider.
	// This could be the same/different from req.Name.
	// ProviderID typically matches with the node.Spec.ProviderID on the node object.
	// Eg: gce://project-name/region/vm-ID
	// This field is REQUIRED.
	ProviderID string `protobuf:"bytes,1,opt,name=ProviderID,proto3" json:"ProviderID,omitempty"`
	// NodeName is the name of the node-object registered to kubernetes.
	// This field is REQUIRED.
	NodeName             string   `protobuf:"bytes,2,opt,name=NodeName,proto3" json:"NodeName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMachineStatusResponse) Reset()         { *m = GetMachineStatusResponse{} }
func (m *GetMachineStatusResponse) String() string { return proto.CompactTextString(m) }
func (*GetMachineStatusResponse) ProtoMessage()    {}
func (*GetMachineStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{12}
}
func (m *GetMachineStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMachineStatusResponse.Unmarshal(m, b)
}
func (m *GetMachineStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMachineStatusResponse.Marshal(b, m, deterministic)
}
func (dst *GetMachineStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMachineStatusResponse.Merge(dst, src)
}
func (m *GetMachineStatusResponse) XXX_Size() int {
	return xxx_messageInfo_GetMachineStatusResponse.Size(m)
}
func (m *GetMachineStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMachineStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMachineStatusResponse proto.InternalMessageInfo

func (m *GetMachineStatusResponse) GetProviderID() string {
	if m != nil {
		return m.ProviderID
	}
	return ""
}

func (m *GetMachineStatusResponse) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

type ListMachinesRequest struct {
	// ProviderSpec is the configuration needed to list machines.
	// Plugin should parse this raw data into pre-defined spec in their respective projects.
	// This field is REQUIRED.
	ProviderSpec []byte `protobuf:"bytes,1,opt,name=ProviderSpec,proto3" json:"ProviderSpec,omitempty"`
	// Secrets is the map containing necessary credentials for cloud-provider to list the machines.
	// This field is OPTIONAL.
	Secrets              map[string][]byte `protobuf:"bytes,2,rep,name=Secrets,proto3" json:"Secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListMachinesRequest) Reset()         { *m = ListMachinesRequest{} }
func (m *ListMachinesRequest) String() string { return proto.CompactTextString(m) }
func (*ListMachinesRequest) ProtoMessage()    {}
func (*ListMachinesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{13}
}
func (m *ListMachinesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachinesRequest.Unmarshal(m, b)
}
func (m *ListMachinesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachinesRequest.Marshal(b, m, deterministic)
}
func (dst *ListMachinesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachinesRequest.Merge(dst, src)
}
func (m *ListMachinesRequest) XXX_Size() int {
	return xxx_messageInfo_ListMachinesRequest.Size(m)
}
func (m *ListMachinesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachinesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachinesRequest proto.InternalMessageInfo

func (m *ListMachinesRequest) GetProviderSpec() []byte {
	if m != nil {
		return m.ProviderSpec
	}
	return nil
}

func (m *ListMachinesRequest) GetSecrets() map[string][]byte {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type ListMachinesResponse struct {
	// MachineList is the map of list of machines. Format for the map should be map<ProviderID, MachineName>.
	// This field is REQUIRED.
	MachineList          map[string]string `protobuf:"bytes,1,rep,name=MachineList,proto3" json:"MachineList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ListMachinesResponse) Reset()         { *m = ListMachinesResponse{} }
func (m *ListMachinesResponse) String() string { return proto.CompactTextString(m) }
func (*ListMachinesResponse) ProtoMessage()    {}
func (*ListMachinesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{14}
}
func (m *ListMachinesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMachinesResponse.Unmarshal(m, b)
}
func (m *ListMachinesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMachinesResponse.Marshal(b, m, deterministic)
}
func (dst *ListMachinesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMachinesResponse.Merge(dst, src)
}
func (m *ListMachinesResponse) XXX_Size() int {
	return xxx_messageInfo_ListMachinesResponse.Size(m)
}
func (m *ListMachinesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMachinesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListMachinesResponse proto.InternalMessageInfo

func (m *ListMachinesResponse) GetMachineList() map[string]string {
	if m != nil {
		return m.MachineList
	}
	return nil
}

type ShutDownMachineRequest struct {
	// MachineName is the machine object name for whose VM, the shutdown call is to be invoked.
	// The plugin is responsible to issuing a shutdown call for a VM backed by this machine name.
	// This field is REQUIRED.
	MachineName string `protobuf:"bytes,1,opt,name=MachineName,proto3" json:"MachineName,omitempty"`
	// ProviderSpec is needed to filter VMs based a cluster before shutting down.
	// Plugin should parse this raw data into pre-defined spec in their respective projects.
	// This field is REQUIRED.
	ProviderSpec []byte `protobuf:"bytes,2,opt,name=ProviderSpec,proto3" json:"ProviderSpec,omitempty"`
	// Secrets is the map containing necessary credentials for cloud-provider to shut down the machine.
	// This field is OPTIONAL.
	Secrets map[string][]byte `protobuf:"bytes,3,rep,name=Secrets,proto3" json:"Secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// LastKnownState is any additional information (if required) that can used by the plugin.
	// It can be used by the plugin to recover from the last execution/error state.
	// Plugin should parse this raw data into it's desired format.
	// This field is OPTIONAL.
	LastKnownState       []byte   `protobuf:"bytes,4,opt,name=LastKnownState,proto3" json:"LastKnownState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutDownMachineRequest) Reset()         { *m = ShutDownMachineRequest{} }
func (m *ShutDownMachineRequest) String() string { return proto.CompactTextString(m) }
func (*ShutDownMachineRequest) ProtoMessage()    {}
func (*ShutDownMachineRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{15}
}
func (m *ShutDownMachineRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShutDownMachineRequest.Unmarshal(m, b)
}
func (m *ShutDownMachineRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShutDownMachineRequest.Marshal(b, m, deterministic)
}
func (dst *ShutDownMachineRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutDownMachineRequest.Merge(dst, src)
}
func (m *ShutDownMachineRequest) XXX_Size() int {
	return xxx_messageInfo_ShutDownMachineRequest.Size(m)
}
func (m *ShutDownMachineRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutDownMachineRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutDownMachineRequest proto.InternalMessageInfo

func (m *ShutDownMachineRequest) GetMachineName() string {
	if m != nil {
		return m.MachineName
	}
	return ""
}

func (m *ShutDownMachineRequest) GetProviderSpec() []byte {
	if m != nil {
		return m.ProviderSpec
	}
	return nil
}

func (m *ShutDownMachineRequest) GetSecrets() map[string][]byte {
	if m != nil {
		return m.Secrets
	}
	return nil
}

func (m *ShutDownMachineRequest) GetLastKnownState() []byte {
	if m != nil {
		return m.LastKnownState
	}
	return nil
}

type ShutDownMachineResponse struct {
	// LastKnownState is any additional information (if required) that can used by the plugin.
	// It can be the final state of the executing call.
	// Could be used by the plugin to recover from the current execution/error state in any future calls.
	// Plugin should return a raw bytes string.
	// This field is OPTIONAL.
	LastKnownState       []byte   `protobuf:"bytes,1,opt,name=LastKnownState,proto3" json:"LastKnownState,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutDownMachineResponse) Reset()         { *m = ShutDownMachineResponse{} }
func (m *ShutDownMachineResponse) String() string { return proto.CompactTextString(m) }
func (*ShutDownMachineResponse) ProtoMessage()    {}
func (*ShutDownMachineResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{16}
}
func (m *ShutDownMachineResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ShutDownMachineResponse.Unmarshal(m, b)
}
func (m *ShutDownMachineResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ShutDownMachineResponse.Marshal(b, m, deterministic)
}
func (dst *ShutDownMachineResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutDownMachineResponse.Merge(dst, src)
}
func (m *ShutDownMachineResponse) XXX_Size() int {
	return xxx_messageInfo_ShutDownMachineResponse.Size(m)
}
func (m *ShutDownMachineResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutDownMachineResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShutDownMachineResponse proto.InternalMessageInfo

func (m *ShutDownMachineResponse) GetLastKnownState() []byte {
	if m != nil {
		return m.LastKnownState
	}
	return nil
}

type GetVolumeIDsRequest struct {
	// PVSpecsList is a list of PV specs for whom volume-IDs are required
	// Plugin should parse this raw data into pre-defined list of PVSpecs
	// This field is REQUIRED.
	PVSpecList           []byte   `protobuf:"bytes,1,opt,name=PVSpecList,proto3" json:"PVSpecList,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVolumeIDsRequest) Reset()         { *m = GetVolumeIDsRequest{} }
func (m *GetVolumeIDsRequest) String() string { return proto.CompactTextString(m) }
func (*GetVolumeIDsRequest) ProtoMessage()    {}
func (*GetVolumeIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{17}
}
func (m *GetVolumeIDsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeIDsRequest.Unmarshal(m, b)
}
func (m *GetVolumeIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeIDsRequest.Marshal(b, m, deterministic)
}
func (dst *GetVolumeIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeIDsRequest.Merge(dst, src)
}
func (m *GetVolumeIDsRequest) XXX_Size() int {
	return xxx_messageInfo_GetVolumeIDsRequest.Size(m)
}
func (m *GetVolumeIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeIDsRequest proto.InternalMessageInfo

func (m *GetVolumeIDsRequest) GetPVSpecList() []byte {
	if m != nil {
		return m.PVSpecList
	}
	return nil
}

type GetVolumeIDsResponse struct {
	// VolumeIDs is a list of VolumeIDs.
	// This field is REQUIRED.
	VolumeIDs            []string `protobuf:"bytes,1,rep,name=VolumeIDs,proto3" json:"VolumeIDs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVolumeIDsResponse) Reset()         { *m = GetVolumeIDsResponse{} }
func (m *GetVolumeIDsResponse) String() string { return proto.CompactTextString(m) }
func (*GetVolumeIDsResponse) ProtoMessage()    {}
func (*GetVolumeIDsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cmi_9b8c0ecc87961c69, []int{18}
}
func (m *GetVolumeIDsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVolumeIDsResponse.Unmarshal(m, b)
}
func (m *GetVolumeIDsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVolumeIDsResponse.Marshal(b, m, deterministic)
}
func (dst *GetVolumeIDsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVolumeIDsResponse.Merge(dst, src)
}
func (m *GetVolumeIDsResponse) XXX_Size() int {
	return xxx_messageInfo_GetVolumeIDsResponse.Size(m)
}
func (m *GetVolumeIDsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVolumeIDsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetVolumeIDsResponse proto.InternalMessageInfo

func (m *GetVolumeIDsResponse) GetVolumeIDs() []string {
	if m != nil {
		return m.VolumeIDs
	}
	return nil
}

var E_CmiSecret = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.FieldOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         1059,
	Name:          "cmi.v1.cmi_secret",
	Tag:           "varint,1059,opt,name=cmi_secret,json=cmiSecret",
	Filename:      "github.com/gardener/machine-spec/cmi.proto",
}

func init() {
	proto.RegisterType((*GetPluginInfoRequest)(nil), "cmi.v1.GetPluginInfoRequest")
	proto.RegisterType((*GetPluginInfoResponse)(nil), "cmi.v1.GetPluginInfoResponse")
	proto.RegisterMapType((map[string]string)(nil), "cmi.v1.GetPluginInfoResponse.ManifestEntry")
	proto.RegisterType((*GetPluginCapabilitiesRequest)(nil), "cmi.v1.GetPluginCapabilitiesRequest")
	proto.RegisterType((*GetPluginCapabilitiesResponse)(nil), "cmi.v1.GetPluginCapabilitiesResponse")
	proto.RegisterType((*PluginCapability)(nil), "cmi.v1.PluginCapability")
	proto.RegisterType((*PluginCapability_RPC)(nil), "cmi.v1.PluginCapability.RPC")
	proto.RegisterType((*ProbeRequest)(nil), "cmi.v1.ProbeRequest")
	proto.RegisterType((*ProbeResponse)(nil), "cmi.v1.ProbeResponse")
	proto.RegisterType((*CreateMachineRequest)(nil), "cmi.v1.CreateMachineRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "cmi.v1.CreateMachineRequest.SecretsEntry")
	proto.RegisterType((*CreateMachineResponse)(nil), "cmi.v1.CreateMachineResponse")
	proto.RegisterType((*DeleteMachineRequest)(nil), "cmi.v1.DeleteMachineRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "cmi.v1.DeleteMachineRequest.SecretsEntry")
	proto.RegisterType((*DeleteMachineResponse)(nil), "cmi.v1.DeleteMachineResponse")
	proto.RegisterType((*GetMachineStatusRequest)(nil), "cmi.v1.GetMachineStatusRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "cmi.v1.GetMachineStatusRequest.SecretsEntry")
	proto.RegisterType((*GetMachineStatusResponse)(nil), "cmi.v1.GetMachineStatusResponse")
	proto.RegisterType((*ListMachinesRequest)(nil), "cmi.v1.ListMachinesRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "cmi.v1.ListMachinesRequest.SecretsEntry")
	proto.RegisterType((*ListMachinesResponse)(nil), "cmi.v1.ListMachinesResponse")
	proto.RegisterMapType((map[string]string)(nil), "cmi.v1.ListMachinesResponse.MachineListEntry")
	proto.RegisterType((*ShutDownMachineRequest)(nil), "cmi.v1.ShutDownMachineRequest")
	proto.RegisterMapType((map[string][]byte)(nil), "cmi.v1.ShutDownMachineRequest.SecretsEntry")
	proto.RegisterType((*ShutDownMachineResponse)(nil), "cmi.v1.ShutDownMachineResponse")
	proto.RegisterType((*GetVolumeIDsRequest)(nil), "cmi.v1.GetVolumeIDsRequest")
	proto.RegisterType((*GetVolumeIDsResponse)(nil), "cmi.v1.GetVolumeIDsResponse")
	proto.RegisterEnum("cmi.v1.PluginCapability_RPC_Type", PluginCapability_RPC_Type_name, PluginCapability_RPC_Type_value)
	proto.RegisterExtension(E_CmiSecret)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IdentityClient is the client API for Identity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IdentityClient interface {
	// GetPluginInfo returns basic details about the plugin
	// This method is REQUIRED.
	GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error)
	// GetPluginCapabilities returns the set of capabilities for the plugin
	// This method is REQUIRED.
	GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*GetPluginCapabilitiesResponse, error)
	// Probe returns the status of the plugin
	// This method is REQUIRED.
	Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error)
}

type identityClient struct {
	cc *grpc.ClientConn
}

func NewIdentityClient(cc *grpc.ClientConn) IdentityClient {
	return &identityClient{cc}
}

func (c *identityClient) GetPluginInfo(ctx context.Context, in *GetPluginInfoRequest, opts ...grpc.CallOption) (*GetPluginInfoResponse, error) {
	out := new(GetPluginInfoResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Identity/GetPluginInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) GetPluginCapabilities(ctx context.Context, in *GetPluginCapabilitiesRequest, opts ...grpc.CallOption) (*GetPluginCapabilitiesResponse, error) {
	out := new(GetPluginCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Identity/GetPluginCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *identityClient) Probe(ctx context.Context, in *ProbeRequest, opts ...grpc.CallOption) (*ProbeResponse, error) {
	out := new(ProbeResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Identity/Probe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IdentityServer is the server API for Identity service.
type IdentityServer interface {
	// GetPluginInfo returns basic details about the plugin
	// This method is REQUIRED.
	GetPluginInfo(context.Context, *GetPluginInfoRequest) (*GetPluginInfoResponse, error)
	// GetPluginCapabilities returns the set of capabilities for the plugin
	// This method is REQUIRED.
	GetPluginCapabilities(context.Context, *GetPluginCapabilitiesRequest) (*GetPluginCapabilitiesResponse, error)
	// Probe returns the status of the plugin
	// This method is REQUIRED.
	Probe(context.Context, *ProbeRequest) (*ProbeResponse, error)
}

func RegisterIdentityServer(s *grpc.Server, srv IdentityServer) {
	s.RegisterService(&_Identity_serviceDesc, srv)
}

func _Identity_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Identity/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetPluginInfo(ctx, req.(*GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_GetPluginCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPluginCapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).GetPluginCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Identity/GetPluginCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).GetPluginCapabilities(ctx, req.(*GetPluginCapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Identity_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IdentityServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Identity/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IdentityServer).Probe(ctx, req.(*ProbeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Identity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmi.v1.Identity",
	HandlerType: (*IdentityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPluginInfo",
			Handler:    _Identity_GetPluginInfo_Handler,
		},
		{
			MethodName: "GetPluginCapabilities",
			Handler:    _Identity_GetPluginCapabilities_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _Identity_Probe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/gardener/machine-spec/cmi.proto",
}

// MachineClient is the client API for Machine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MachineClient interface {
	// CreateMachine is the gRPC call to create a machine.
	// This method is REQUIRED.
	CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error)
	// DeleteMachine is the gRPC call to delete a machine.
	// This method is REQUIRED.
	DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error)
	// GetMachineStatus is the gRPC call to get the status of a machine.
	// This method is OPTIONAL.
	GetMachineStatus(ctx context.Context, in *GetMachineStatusRequest, opts ...grpc.CallOption) (*GetMachineStatusResponse, error)
	// ListMachines is the gRPC call to list machines backed by the providerSpec.
	// This method is OPTIONAL.
	ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error)
	// ShutDownMachine is the gRPC call to shutdown/power-off a machine.
	// This method is OPTIONAL.
	ShutDownMachine(ctx context.Context, in *ShutDownMachineRequest, opts ...grpc.CallOption) (*ShutDownMachineResponse, error)
	// GetVolumeIDs() is the gRPC call to list VolumeIDs
	// (if exists) for PVs provided by PVSpecList.
	// This method is OPTIONAL.
	GetVolumeIDs(ctx context.Context, in *GetVolumeIDsRequest, opts ...grpc.CallOption) (*GetVolumeIDsResponse, error)
}

type machineClient struct {
	cc *grpc.ClientConn
}

func NewMachineClient(cc *grpc.ClientConn) MachineClient {
	return &machineClient{cc}
}

func (c *machineClient) CreateMachine(ctx context.Context, in *CreateMachineRequest, opts ...grpc.CallOption) (*CreateMachineResponse, error) {
	out := new(CreateMachineResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Machine/CreateMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineClient) DeleteMachine(ctx context.Context, in *DeleteMachineRequest, opts ...grpc.CallOption) (*DeleteMachineResponse, error) {
	out := new(DeleteMachineResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Machine/DeleteMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineClient) GetMachineStatus(ctx context.Context, in *GetMachineStatusRequest, opts ...grpc.CallOption) (*GetMachineStatusResponse, error) {
	out := new(GetMachineStatusResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Machine/GetMachineStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineClient) ListMachines(ctx context.Context, in *ListMachinesRequest, opts ...grpc.CallOption) (*ListMachinesResponse, error) {
	out := new(ListMachinesResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Machine/ListMachines", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineClient) ShutDownMachine(ctx context.Context, in *ShutDownMachineRequest, opts ...grpc.CallOption) (*ShutDownMachineResponse, error) {
	out := new(ShutDownMachineResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Machine/ShutDownMachine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineClient) GetVolumeIDs(ctx context.Context, in *GetVolumeIDsRequest, opts ...grpc.CallOption) (*GetVolumeIDsResponse, error) {
	out := new(GetVolumeIDsResponse)
	err := c.cc.Invoke(ctx, "/cmi.v1.Machine/GetVolumeIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MachineServer is the server API for Machine service.
type MachineServer interface {
	// CreateMachine is the gRPC call to create a machine.
	// This method is REQUIRED.
	CreateMachine(context.Context, *CreateMachineRequest) (*CreateMachineResponse, error)
	// DeleteMachine is the gRPC call to delete a machine.
	// This method is REQUIRED.
	DeleteMachine(context.Context, *DeleteMachineRequest) (*DeleteMachineResponse, error)
	// GetMachineStatus is the gRPC call to get the status of a machine.
	// This method is OPTIONAL.
	GetMachineStatus(context.Context, *GetMachineStatusRequest) (*GetMachineStatusResponse, error)
	// ListMachines is the gRPC call to list machines backed by the providerSpec.
	// This method is OPTIONAL.
	ListMachines(context.Context, *ListMachinesRequest) (*ListMachinesResponse, error)
	// ShutDownMachine is the gRPC call to shutdown/power-off a machine.
	// This method is OPTIONAL.
	ShutDownMachine(context.Context, *ShutDownMachineRequest) (*ShutDownMachineResponse, error)
	// GetVolumeIDs() is the gRPC call to list VolumeIDs
	// (if exists) for PVs provided by PVSpecList.
	// This method is OPTIONAL.
	GetVolumeIDs(context.Context, *GetVolumeIDsRequest) (*GetVolumeIDsResponse, error)
}

func RegisterMachineServer(s *grpc.Server, srv MachineServer) {
	s.RegisterService(&_Machine_serviceDesc, srv)
}

func _Machine_CreateMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).CreateMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Machine/CreateMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).CreateMachine(ctx, req.(*CreateMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machine_DeleteMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).DeleteMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Machine/DeleteMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).DeleteMachine(ctx, req.(*DeleteMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machine_GetMachineStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMachineStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).GetMachineStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Machine/GetMachineStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).GetMachineStatus(ctx, req.(*GetMachineStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machine_ListMachines_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMachinesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).ListMachines(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Machine/ListMachines",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).ListMachines(ctx, req.(*ListMachinesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machine_ShutDownMachine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutDownMachineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).ShutDownMachine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Machine/ShutDownMachine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).ShutDownMachine(ctx, req.(*ShutDownMachineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machine_GetVolumeIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVolumeIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).GetVolumeIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cmi.v1.Machine/GetVolumeIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).GetVolumeIDs(ctx, req.(*GetVolumeIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Machine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cmi.v1.Machine",
	HandlerType: (*MachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMachine",
			Handler:    _Machine_CreateMachine_Handler,
		},
		{
			MethodName: "DeleteMachine",
			Handler:    _Machine_DeleteMachine_Handler,
		},
		{
			MethodName: "GetMachineStatus",
			Handler:    _Machine_GetMachineStatus_Handler,
		},
		{
			MethodName: "ListMachines",
			Handler:    _Machine_ListMachines_Handler,
		},
		{
			MethodName: "ShutDownMachine",
			Handler:    _Machine_ShutDownMachine_Handler,
		},
		{
			MethodName: "GetVolumeIDs",
			Handler:    _Machine_GetVolumeIDs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/gardener/machine-spec/cmi.proto",
}

func init() {
	proto.RegisterFile("github.com/gardener/machine-spec/cmi.proto", fileDescriptor_cmi_9b8c0ecc87961c69)
}

var fileDescriptor_cmi_9b8c0ecc87961c69 = []byte{
	// 1072 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x56, 0x4f, 0x6f, 0xe3, 0x54,
	0x10, 0x8f, 0xe3, 0xa4, 0x4d, 0xa7, 0x69, 0x31, 0x6f, 0xd3, 0x6e, 0x64, 0xd2, 0x6e, 0xb0, 0x00,
	0x95, 0x3f, 0xeb, 0x2c, 0x81, 0x45, 0xa8, 0xfc, 0x53, 0xfe, 0x91, 0x86, 0xa6, 0x49, 0x65, 0xa7,
	0xa9, 0x84, 0x84, 0x2a, 0xc7, 0x79, 0x4d, 0x2d, 0x12, 0xdb, 0xd8, 0x2f, 0xad, 0x22, 0xbe, 0x01,
	0x07, 0xc4, 0x91, 0x13, 0x17, 0x0e, 0x7c, 0x0b, 0xbe, 0x00, 0x07, 0xbe, 0x06, 0x67, 0x8e, 0x9c,
	0x90, 0xed, 0x67, 0xc7, 0x71, 0x9c, 0x54, 0xab, 0x65, 0xd9, 0x9b, 0x3d, 0x6f, 0xe6, 0x37, 0x33,
	0xbf, 0x99, 0xf7, 0x66, 0xe0, 0x9d, 0x91, 0x46, 0x6e, 0xa6, 0x03, 0x51, 0x35, 0x26, 0xa5, 0x91,
	0x62, 0x0d, 0xb1, 0x8e, 0xad, 0xd2, 0x44, 0x51, 0x6f, 0x34, 0x1d, 0x3f, 0xb6, 0x4d, 0xac, 0x96,
	0xd4, 0x89, 0x26, 0x9a, 0x96, 0x41, 0x0c, 0xb4, 0xe1, 0x7c, 0xde, 0xbe, 0xcf, 0x17, 0x47, 0x86,
	0x31, 0x1a, 0xe3, 0x92, 0x2b, 0x1d, 0x4c, 0xaf, 0x4b, 0x43, 0x6c, 0xab, 0x96, 0x66, 0x12, 0xc3,
	0xf2, 0x34, 0xf9, 0xc3, 0xa8, 0xc6, 0x9d, 0xa5, 0x98, 0x26, 0xb6, 0x6c, 0xef, 0x5c, 0xd8, 0x87,
	0x5c, 0x13, 0x93, 0xf3, 0xf1, 0x74, 0xa4, 0xe9, 0x2d, 0xfd, 0xda, 0x90, 0xf0, 0x77, 0x53, 0x6c,
	0x13, 0xe1, 0x0f, 0x06, 0xf6, 0x22, 0x07, 0xb6, 0x69, 0xe8, 0x36, 0x46, 0x08, 0x52, 0xba, 0x32,
	0xc1, 0x79, 0xa6, 0xc8, 0x1c, 0x6d, 0x49, 0xee, 0x37, 0xca, 0xc3, 0xe6, 0x2d, 0xb6, 0x6c, 0xcd,
	0xd0, 0xf3, 0x49, 0x57, 0xec, 0xff, 0xa2, 0x26, 0x64, 0x26, 0x8a, 0xae, 0x5d, 0x63, 0x9b, 0xe4,
	0xd9, 0x22, 0x7b, 0xb4, 0x5d, 0x7e, 0x57, 0xf4, 0x82, 0x17, 0x63, 0xe1, 0xc5, 0x33, 0xaa, 0xdd,
	0xd0, 0x89, 0x35, 0x93, 0x02, 0x63, 0xfe, 0x13, 0xd8, 0x59, 0x38, 0x42, 0x1c, 0xb0, 0xdf, 0xe2,
	0x19, 0x0d, 0xc3, 0xf9, 0x44, 0x39, 0x48, 0xdf, 0x2a, 0xe3, 0x29, 0xa6, 0x31, 0x78, 0x3f, 0xc7,
	0xc9, 0x8f, 0x19, 0xe1, 0x10, 0x0a, 0x81, 0xb7, 0x9a, 0x62, 0x2a, 0x03, 0x6d, 0xac, 0x11, 0x0d,
	0xdb, 0x7e, 0xb6, 0xdf, 0xc0, 0xc1, 0x8a, 0x73, 0x9a, 0xf4, 0xa7, 0x90, 0x55, 0x43, 0xf2, 0x3c,
	0xe3, 0xa6, 0x92, 0xf7, 0x53, 0x89, 0x58, 0xce, 0xa4, 0x05, 0x6d, 0xe1, 0x97, 0x24, 0x70, 0x51,
	0x15, 0xf4, 0x04, 0x58, 0xcb, 0x54, 0xdd, 0xf8, 0xb7, 0xcb, 0x85, 0x55, 0x48, 0xa2, 0x74, 0x5e,
	0x3b, 0x49, 0x48, 0x8e, 0x2a, 0xff, 0x27, 0x03, 0xac, 0x74, 0x5e, 0x43, 0x4f, 0x21, 0x45, 0x66,
	0xa6, 0x57, 0x81, 0xdd, 0xf2, 0xeb, 0xeb, 0x4c, 0xc5, 0xde, 0xcc, 0xc4, 0x92, 0xab, 0x2e, 0xfc,
	0xc4, 0x40, 0xca, 0xf9, 0x45, 0xdb, 0xb0, 0x79, 0xd1, 0x39, 0xed, 0x74, 0x2f, 0x3b, 0x5c, 0x02,
	0x21, 0xd8, 0xad, 0x49, 0x8d, 0x4a, 0xaf, 0x71, 0x75, 0x56, 0xa9, 0x9d, 0xb4, 0x3a, 0x0d, 0x8e,
	0x71, 0x64, 0xf5, 0x46, 0xbb, 0x11, 0x92, 0x25, 0xd1, 0x3e, 0xa0, 0x66, 0xa3, 0xe7, 0x0b, 0xae,
	0xe4, 0x5e, 0xa5, 0x77, 0x21, 0x73, 0x2c, 0x7a, 0x15, 0x76, 0xda, 0x2d, 0x39, 0x38, 0x90, 0xb9,
	0x14, 0xca, 0x01, 0x27, 0x9f, 0x5c, 0xf4, 0xea, 0xdd, 0xcb, 0x4e, 0x00, 0x90, 0x76, 0x40, 0x1d,
	0x80, 0x7e, 0xb7, 0x7d, 0x71, 0xd6, 0xb8, 0x6a, 0xd5, 0x65, 0x6e, 0xa3, 0xba, 0xe1, 0x65, 0x22,
	0xec, 0x42, 0xf6, 0xdc, 0x32, 0x06, 0xd8, 0xaf, 0x47, 0x05, 0x76, 0xe8, 0x3f, 0xe5, 0xff, 0x09,
	0xa4, 0x2d, 0xac, 0x0c, 0x67, 0x94, 0x2e, 0x5e, 0xf4, 0xda, 0x5a, 0xf4, 0xdb, 0x5a, 0xac, 0x1a,
	0xc6, 0xb8, 0xef, 0xd4, 0x5b, 0xf2, 0x14, 0x85, 0x1f, 0x92, 0x90, 0xab, 0x59, 0x58, 0x21, 0xf8,
	0xcc, 0xbb, 0x43, 0x14, 0x1b, 0x15, 0x61, 0x9b, 0x4a, 0x3a, 0xf3, 0x36, 0x0e, 0x8b, 0x90, 0xe0,
	0x46, 0x73, 0xab, 0x0d, 0xb1, 0x25, 0x9b, 0x58, 0x75, 0xdb, 0x29, 0x2b, 0x2d, 0xc8, 0xd0, 0x09,
	0x6c, 0xca, 0x58, 0xb5, 0x30, 0xb1, 0x69, 0x5b, 0xbf, 0xed, 0x97, 0x21, 0xce, 0xa9, 0x48, 0x75,
	0xdd, 0xce, 0xad, 0xb2, 0x3f, 0x57, 0x19, 0xc9, 0x37, 0x47, 0x6f, 0xc1, 0x6e, 0x5b, 0xb1, 0xc9,
	0xa9, 0x6e, 0xdc, 0xe9, 0x32, 0x51, 0x08, 0xce, 0xa7, 0x5c, 0x7f, 0x11, 0x29, 0x7f, 0x0c, 0xd9,
	0x30, 0xca, 0x7d, 0xfd, 0x9f, 0x0d, 0xf7, 0xff, 0xf7, 0xb0, 0x17, 0x09, 0x8b, 0xf2, 0x7a, 0x08,
	0xe0, 0xa7, 0xd5, 0xaa, 0x53, 0xac, 0x90, 0x04, 0xf1, 0x90, 0xe9, 0x18, 0x43, 0x8f, 0x29, 0xef,
	0x56, 0x05, 0xff, 0x31, 0x81, 0xb3, 0x71, 0x81, 0xbb, 0x95, 0xa8, 0xe3, 0x31, 0xfe, 0xdf, 0x2b,
	0x11, 0xe7, 0xf4, 0x65, 0x57, 0xe2, 0x0b, 0xd8, 0x8b, 0x84, 0x45, 0x2b, 0xb1, 0xec, 0x9c, 0x89,
	0x65, 0xf3, 0x2f, 0x06, 0x1e, 0x36, 0x31, 0xa1, 0xe6, 0x8e, 0x6c, 0x6a, 0xff, 0xb7, 0x84, 0x9e,
	0x46, 0x09, 0x7d, 0x2f, 0xf4, 0x62, 0xc7, 0xf9, 0x5d, 0xc3, 0xe9, 0x73, 0x71, 0xd5, 0x87, 0xfc,
	0xb2, 0xc7, 0xe7, 0x6f, 0x5c, 0xe1, 0x77, 0x06, 0x1e, 0xb4, 0x35, 0xdb, 0x47, 0x0e, 0xe8, 0x8b,
	0x92, 0xc3, 0xc4, 0x90, 0xd3, 0x9c, 0x93, 0x93, 0x74, 0xc9, 0x39, 0xf2, 0xc9, 0x89, 0x41, 0x7c,
	0x51, 0xc4, 0xfc, 0xc6, 0x40, 0x6e, 0xd1, 0x1d, 0x65, 0xa5, 0x1b, 0x34, 0x80, 0x73, 0x4c, 0xa7,
	0xd4, 0xe3, 0xf8, 0x08, 0x83, 0x79, 0x1b, 0xe8, 0x7b, 0x23, 0x37, 0x8c, 0xc0, 0x7f, 0x0e, 0x5c,
	0x54, 0xe1, 0x99, 0x06, 0xef, 0x8f, 0x49, 0xd8, 0x97, 0x6f, 0xa6, 0xa4, 0x6e, 0xdc, 0xe9, 0x2f,
	0xe4, 0xf6, 0x7f, 0x15, 0x6d, 0xd6, 0x60, 0xbd, 0x88, 0x77, 0xfb, 0xb2, 0xef, 0x7f, 0x05, 0x1e,
	0x2e, 0x05, 0xf6, 0x8c, 0x2f, 0xc0, 0x53, 0x78, 0xd0, 0xc4, 0xa4, 0x6f, 0x8c, 0xa7, 0x13, 0xdc,
	0xaa, 0x07, 0xdd, 0xeb, 0xdc, 0x88, 0xbe, 0xc3, 0x09, 0x2d, 0xbd, 0x63, 0x1a, 0x92, 0x08, 0x1f,
	0xba, 0x9b, 0x5e, 0xc8, 0x8c, 0xba, 0x2d, 0xc0, 0x56, 0x20, 0x74, 0x3b, 0x66, 0x4b, 0x9a, 0x0b,
	0xca, 0xff, 0x30, 0x90, 0x69, 0x0d, 0xb1, 0x4e, 0x9c, 0x95, 0xa5, 0x03, 0x3b, 0x0b, 0x4b, 0x1b,
	0x2a, 0xac, 0xd8, 0xe5, 0xdc, 0x88, 0xf8, 0x83, 0xb5, 0x9b, 0x9e, 0x90, 0x40, 0xd7, 0xa1, 0x1d,
	0x33, 0xbc, 0x76, 0xa1, 0x37, 0x96, 0x2c, 0x63, 0xb6, 0x36, 0xfe, 0xcd, 0x7b, 0xb4, 0x02, 0x3f,
	0x1f, 0x41, 0xda, 0x5d, 0x27, 0x50, 0x2e, 0xd8, 0x95, 0x42, 0xdb, 0x06, 0xbf, 0x17, 0x91, 0xfa,
	0x76, 0xe5, 0xbf, 0x59, 0xd8, 0xa4, 0x55, 0x72, 0x72, 0x5f, 0x18, 0xa1, 0xf3, 0xdc, 0xe3, 0x06,
	0xfe, 0x3c, 0xf7, 0xd8, 0xb9, 0x2b, 0x24, 0x1c, 0xbc, 0x85, 0x41, 0x30, 0xc7, 0x8b, 0x1b, 0x5b,
	0x73, 0xbc, 0xd8, 0xe9, 0x21, 0x24, 0xd0, 0x25, 0x70, 0xd1, 0xc7, 0x12, 0x3d, 0xba, 0xe7, 0xe1,
	0xe6, 0x8b, 0xab, 0x15, 0x02, 0xe0, 0x53, 0xc8, 0x86, 0x1f, 0x0e, 0xf4, 0xda, 0x9a, 0x07, 0x8f,
	0x2f, 0xac, 0x7b, 0x6b, 0x84, 0x04, 0xea, 0xc1, 0x2b, 0x91, 0xf6, 0x47, 0x87, 0xeb, 0x2f, 0x2c,
	0xff, 0x68, 0xe5, 0x79, 0x38, 0xc4, 0x70, 0x6b, 0xcf, 0x43, 0x8c, 0xb9, 0x27, 0x7c, 0x21, 0xfe,
	0xd0, 0x07, 0x3b, 0xfe, 0x0c, 0x40, 0x9d, 0x68, 0x57, 0xb6, 0x7b, 0xc3, 0xd1, 0xc1, 0xd2, 0xa6,
	0xf9, 0xa5, 0x86, 0xc7, 0xc3, 0xae, 0x49, 0x34, 0x43, 0xb7, 0xf3, 0xbf, 0x66, 0x8a, 0xcc, 0x51,
	0x46, 0xda, 0x52, 0x27, 0x9a, 0xf7, 0x24, 0x54, 0xd3, 0x5f, 0xb3, 0xea, 0x44, 0x1b, 0x6c, 0xb8,
	0xfa, 0x1f, 0xfc, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xc6, 0xa4, 0xba, 0xd6, 0x0d, 0x00, 0x00,
}
