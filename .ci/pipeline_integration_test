#!/usr/bin/env bash

############################################## <Color> ##############################################
RED='\033[0;31m'
NC='\033[0m' # No Color
############################################## </Color> ##############################################

mkdir -p dev

mcm_repo_path="dev/mcm"
logs_path=.ci/controllers-test/logs
TEST_RESULT=
cli_path=/cc/utils/cli.py
num_of_existing_nodes=1
TEST_SHOOT=aws-ci-it
CREDENTIALS_SECRET_NAME=shoot-operator-aws-team
GARDEN_CORE_NAMESPACE=garden-core
KUBECONFIG_EXPIRY=10800

#these variables are accessed in test/integration/controller so prefixed by ${SOURCE_PATH} for absolute path
declare CONTROL_KUBECONFIG=${SOURCE_PATH}/dev/control_kubeconfig.yaml
declare TARGET_KUBECONFIG=${SOURCE_PATH}/dev/target_kubeconfig.yaml
declare TEST_CREDS_SECRET=test-mc-secret

export CONTROL_KUBECONFIG
export TARGET_KUBECONFIG
export TEST_CREDS_SECRET
export MACHINECLASS_V1=${SOURCE_PATH}/dev/v1machineclass_converted.yaml
export MACHINE_CONTROLLER_MANAGER_DEPLOYMENT_NAME="machine-controller-manager"

############################################## <Helper fn> ##############################################

function hf_num_of_objects() {
    output=$(kubectl --kubeconfig=dev/control_kubeconfig.yaml get "$1" | grep machine.sapcloud.io 2>&1)
    
    if [ -z "$output" ]; then
       return 0 
    fi

    object_count=$(echo "$output" | wc -l)

    return "$object_count"
}

function hf_num_of_ready_nodes() {
    output=$(kubectl --kubeconfig=dev/target_kubeconfig.yaml get "$1" 2>&1)
    
    ready_count=$(echo "$output" | tr " " "\n" | grep ^Ready -c)

    return $((ready_count-num_of_existing_nodes))
}

function hf_wait_on() {
    wait_interval=30
    function_name=$1
    function_param=$2
    count_to_match=$3
    seconds_to_wait=$4
    iteration_count=$(($seconds_to_wait/30))

    while
        "$function_name" "$function_param"
        ret=$?
        [[ $ret -ne $count_to_match ]]
    do
        printf "\n\t Error: %s invoked with %s did not return expected value %s. Will retry again in %s...\n" "$function_name" "$function_param" "$count_to_match" "$wait_interval"
        sleep $wait_interval
        ((iteration_count--))

        # Exit script when timeout occurs
        if [ $iteration_count -le 0 ]; then
            printf "\tFailed: Timeout occured while waiting for operation. Exiting Test to avoid further conflicts.\n"
            printf "\tWas Executing function: %s, %s\n" $function_name $function_param
            printf "${RED}There is another PR running its integration test on the clusters. Waiting Timed Out. Kindly re-run the tests.${NC}\n"
            exit 1
        fi

    done
}

############################################## </Helper fn> ##############################################


############################################## <Initialization> ##############################################

function setup_ginkgo() {
    echo "Installing Ginkgo..."
    GO111MODULE=off go get -u github.com/onsi/ginkgo/ginkgo
    ginkgo version
    echo "Successfully installed Ginkgo."
}

# Fetch service account kubeconfig
function fetch_service_account_kubeconfig() {
    ${cli_path} config attribute --cfg-type kubernetes --cfg-name mcm-ci-garden-dev-virtual --key kubeconfig  > dev/sa_kubeconfig.yaml
}


function request_kubeconfig() {
    kubectl --kubeconfig=dev/sa_kubeconfig.yaml create -f <(printf '{"spec":{"expirationSeconds":%s}}' $KUBECONFIG_EXPIRY) --raw /apis/core.gardener.cloud/v1beta1/namespaces/"$1"/shoots/"$2"/adminkubeconfig | jq -r ".status.kubeconfig" | base64 -d > "$3"
}

# Fetch *-ci-it cluster kubeconfig
function fetch_oot_cluster_kubeconfig() {
    NAMESPACE=garden-mcm-ci
    SHOOT_NAME=aws-ci-it
    request_kubeconfig $NAMESPACE $SHOOT_NAME "dev/target_kubeconfig.yaml"
    request_kubeconfig $NAMESPACE $SHOOT_NAME "dev/control_kubeconfig.yaml"
}

function fetch_userdata(){
    NAMESPACE='garden'
    kubectl --kubeconfig=dev/sa_kubeconfig.yaml get shoot $TEST_SHOOT -oyaml > dev/shoot.yaml
    SEED_NAME=$(yq eval '.status.seedName' dev/shoot.yaml)
    request_kubeconfig $NAMESPACE $SEED_NAME "dev/seed_kubeconfig.yaml"
    USERDATA_SECRET_NAME=$(kubectl --kubeconfig=dev/seed_kubeconfig.yaml get secrets -n shoot--mcm-ci--$TEST_SHOOT -o custom-columns=Name:.metadata.name --no-headers | grep shoot--mcm-ci)
    kubectl --kubeconfig=dev/seed_kubeconfig.yaml get secret $USERDATA_SECRET_NAME -n shoot--mcm-ci--$TEST_SHOOT -oyaml > dev/userData.yaml
    userData=$(yq eval '.data.userData' dev/userData.yaml)
    echo $userData
}

function fetch_machine_class(){
    MCC_NAME=$(kubectl --kubeconfig=dev/seed_kubeconfig.yaml get mcc -n shoot--mcm-ci--$TEST_SHOOT -o custom-columns=Name:.metadata.name --no-headers | grep shoot--mcm-ci)
    kubectl --kubeconfig=dev/seed_kubeconfig.yaml get mcc $MCC_NAME -n shoot--mcm-ci--$TEST_SHOOT -oyaml > ${SOURCE_PATH}/dev/v1machineclass_converted.yaml
    yq eval 'del(.metadata.creationTimestamp) | del(.metadata.finalizers) | del(.metadata.generation) | del(.metadata.resourceVersion) | del(.metadata.uid) | del(.credentialsSecretRef)'  dev/v1machineclass_converted.yaml -i
    yq eval '.metadata.name = "test-mc-v1" | .metadata.namespace = "default" | .secretRef.name = env(TEST_CREDS_SECRET) | .secretRef.namespace = "default"' dev/v1machineclass_converted.yaml -i
}

function fetch_credentials(){
   kubectl --kubeconfig=dev/sa_kubeconfig.yaml get secret $CREDENTIALS_SECRET_NAME -n $GARDEN_CORE_NAMESPACE -o yaml > dev/credentials.yaml
   accessKeyID=$(yq eval '.data.accessKeyID' dev/credentials.yaml)
   secretAccessKey=$(yq eval '.data.secretAccessKey' dev/credentials.yaml)
   echo $accessKeyID
   echo $secretAccessKey
}

function create_test_mc_secret() {
    result=$(fetch_credentials)
    accessKeyID=$(echo "$result" | head -n 1)
    secretAccessKey=$(echo "$result" | tail -n 1)
    userData=$(fetch_userdata)
    rm -f dev/credentials.yaml
    rm -f dev/userData.yaml
secret_yaml=$(cat <<EOF
apiVersion: v1
data:
  accessKeyID: $accessKeyID
  secretAccessKey: $secretAccessKey
  userData: $userData
kind: Secret
metadata:
  name: $TEST_CREDS_SECRET
  namespace: default
type: Opaque
EOF
)
    echo "$secret_yaml" | kubectl --kubeconfig=$CONTROL_KUBECONFIG apply -f -
}

function delete_test_mc_secret() {
    kubectl --kubeconfig=$CONTROL_KUBECONFIG delete secret $TEST_CREDS_SECRET
}

function  cleanup_environment() {
    printf "\n\t\t\t----- Deleting the test_mc_secret --------\n"
    delete_test_mc_secret
}

function setup_environment() {
    printf "\n\t\t\t----- Setup Test Environment --------\n"

    #installing yq
    printf "\nDownloading and installing yq\n"
    curl -LO https://github.com/mikefarah/yq/releases/download/v4.13.3/yq_linux_amd64
    chmod +x ./yq_linux_amd64
    mv ./yq_linux_amd64 /usr/local/bin/yq
    printf "Successfully installed yq\n"

    # install kubectl
    printf "\nDownloading and installing kubectl\n"
    curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    mv ./kubectl /usr/local/bin/kubectl
    printf "Successfully installed kubectl\n"

    #install ginkgo
    printf "\n Checking ginkgo version..."
    ginkgo version
    if ! [ -x "$(command -v ginkgo)" ]; then
    setup_ginkgo
    fi

    # Clone MCM Repo into $mcm_repo_path
    if [[ ! -d "$mcm_repo_path" ]]; then
      printf "Cloning machine-controller-manager repo into %s.\n" "$mcm_repo_path"
      local cloneCmd="git clone https://github.com/gardener/machine-controller-manager.git "$mcm_repo_path" --recursive"
      printf "Executing %s...\n" "$cloneCmd"
      eval $cloneCmd
    fi

    #fetching kubeconfigs and machineClass from secret_server
    fetch_service_account_kubeconfig
    fetch_oot_cluster_kubeconfig
    create_test_mc_secret
    echo "test-mc-secret created successfully"
    fetch_machine_class
    echo "machineclass fetched successfully"
}

function fetch_existing_nodes() {
    kubectl --kubeconfig=$TARGET_KUBECONFIG get nodes --no-headers | wc -l
}

function check_cluster_state() {
    printf "\t\t\t----- Checking Test Environment -------\n"

    printf "\nChecking existance of machine crds\n"
    # Wait 60mins for any existing PRs to cleanup machine crds, as crd cleanup is last step.
    hf_wait_on "hf_num_of_objects" crd 0 3600
    printf "No machine crds in control test cluster\n"

    printf "\nChecking existance of node objects\n"
    num_of_existing_nodes=$(($(fetch_existing_nodes)))
    printf "\nexisting_default_nodes=$num_of_existing_nodes\n"
    # Wait 60mins for any existing PRs to cleanup nodes
    hf_wait_on "hf_num_of_ready_nodes" nodes 0 3600
    printf "No additional node objects in target test cluster\n"

    #wait in case some orphan resources are terminating
    sleep 30
    
    printf "\nCluster state looks clean\n"
    printf "\t\t\t----- Checking Test Environment DONE -------\n"
}

############################################## </Initialization> ##############################################

############################################## <Modules> ########################################################

function run_integration_tests() {
    echo "Starting integration tests..."
    set +e

    ginkgo -v -mod=vendor --show-node-events --poll-progress-after=300s --poll-progress-interval=60s test/integration/controller
    TEST_RESULT=$?
    
    set -e

    if [ ${TEST_RESULT} -ne 0 ]; then
        printf "\n\t\t\t${RED}Integration tests failed. Kindly check you PR${NC}\n"
    else
        printf "Done with integration test\n"
    fi
}

function print_controller_logs {
    printf "\n\t\t\t----- Start of MCM Logs -----------\n"
    cat $logs_path/mcm_process.log
    printf "\n\t\t\t----- End of MCM Logs   ----------\n\n"

    printf "\n\t\t\t----- Start of MC Logs -----------\n"
    cat $logs_path/mc_process.log
    printf "\n\t\t\t----- End of MC Logs   ----------\n\n"
}

############################################## </Modules> ########################################################


############################################## <Main> ########################################################

printf "\n\t\t\t----- Start of Test Script -----------\n"
setup_environment
#if cluster state is not clean then don't run the tests
check_cluster_state
result=$?
if [ ${result} -ne 0 ]; then
exit $result
fi
run_integration_tests
cleanup_environment
print_controller_logs
printf "\n\t\t\t----- End of Test Script -----------\n"
printf "\n\t\t\t----- Exiting with TEST_RESULT: %s -----------\n" "$TEST_RESULT"

exit $TEST_RESULT

############################################## </Main> ########################################################
