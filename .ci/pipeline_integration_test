#!/usr/bin/env bash

############################################## <Color> ##############################################
RED='\033[0;31m'
NC='\033[0m' # No Color
############################################## </Color> ##############################################

mkdir -p dev

mcm_repo_path="dev/mcm"
logs_path=.ci/controllers-test/logs
TEST_RESULT=
cli_path=/cc/utils/cli.py
TEST_SHOOT=aws-ci-it
SEED_NAME=
KUBECONFIG_EXPIRY=10800

#these variables are accessed in test/integration/controller so prefixed by ${SOURCE_PATH} for absolute path
declare CONTROL_KUBECONFIG=${SOURCE_PATH}/dev/control_kubeconfig.yaml
declare TARGET_KUBECONFIG=${SOURCE_PATH}/dev/target_kubeconfig.yaml
declare TEST_CREDS_SECRET=test-mc-secret
declare IS_CONTROL_CLUSTER_SEED=true
declare PROJECT=mcm-ci
declare CONTROL_CLUSTER_NAMESPACE=shoot--"${PROJECT}"--"${TEST_SHOOT}"
declare GNA_SECRET_NAME

export CONTROL_KUBECONFIG
export TARGET_KUBECONFIG
export TEST_CREDS_SECRET
export IS_CONTROL_CLUSTER_SEED
export PROJECT
export CONTROL_CLUSTER_NAMESPACE
export MACHINE_CONTROLLER_MANAGER_DEPLOYMENT_NAME="machine-controller-manager"

############################################## <Initialization> ##############################################

function setup_ginkgo() {
    echo "Installing Ginkgo..."
    GO111MODULE=off go get -u github.com/onsi/ginkgo/ginkgo
    ginkgo version
    echo "Successfully installed Ginkgo."
}

# Fetch service account kubeconfig
function fetch_service_account_kubeconfig() {
    ${cli_path} config attribute --cfg-type kubernetes --cfg-name mcm-ci-garden-dev-virtual --key kubeconfig  > dev/sa_kubeconfig.yaml
}


function request_kubeconfig() {
    kubectl --kubeconfig=dev/sa_kubeconfig.yaml create -f <(printf '{"spec":{"expirationSeconds":%s}}' $KUBECONFIG_EXPIRY) --raw /apis/core.gardener.cloud/v1beta1/namespaces/"$1"/shoots/"$2"/adminkubeconfig | jq -r ".status.kubeconfig" | base64 -d > "$3"
}

# Fetch *-ci-it cluster kubeconfig
function fetch_oot_cluster_kubeconfig() {
    NAMESPACE=garden-mcm-ci
    SHOOT_NAME=aws-ci-it
    request_kubeconfig $NAMESPACE $SHOOT_NAME "dev/target_kubeconfig.yaml"
}

function fetch_control_cluster_kubeconfig() {
    NAMESPACE='garden'
    kubectl --kubeconfig=dev/sa_kubeconfig.yaml get shoot $TEST_SHOOT -oyaml > dev/shoot.yaml
    SEED_NAME=$(yq eval '.status.seedName' dev/shoot.yaml)
    request_kubeconfig $NAMESPACE $SEED_NAME "dev/control_kubeconfig.yaml"
}

function fetch_gna_secret_name(){
    kubectl --kubeconfig=dev/control_kubeconfig.yaml get mcc -n $CONTROL_CLUSTER_NAMESPACE -oyaml > "${SOURCE_PATH}"/dev/v1machineclass_converted.yaml
    GNA_SECRET_NAME=$(yq eval '.items.[0].providerSpec.tags."worker.gardener.cloud/gardener-node-agent-secret-name"' dev/v1machineclass_converted.yaml)
    export GNA_SECRET_NAME=$GNA_SECRET_NAME
}

function install_dependencies() {
    printf "\n\t\t\t----- Installing Dependencies --------\n"

    #installing yq
    printf "\nDownloading and installing yq\n"
    curl -LO https://github.com/mikefarah/yq/releases/download/v4.13.3/yq_linux_amd64
    chmod +x ./yq_linux_amd64
    mv ./yq_linux_amd64 /usr/local/bin/yq
    printf "Successfully installed yq\n"

    # install kubectl
    printf "\nDownloading and installing kubectl\n"
    curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.0/bin/linux/amd64/kubectl
    chmod +x ./kubectl
    mv ./kubectl /usr/local/bin/kubectl
    printf "Successfully installed kubectl\n"

    #install ginkgo
    printf "\n Checking ginkgo version..."
    ginkgo version
    if ! [ -x "$(command -v ginkgo)" ]; then
    setup_ginkgo
    fi
}

function setup_environment() {
    printf "\n\t\t\t----- Setup Test Environment --------\n"

    # Clone MCM Repo into $mcm_repo_path
    if [[ ! -d "$mcm_repo_path" ]]; then
      printf "Cloning machine-controller-manager repo into %s.\n" "$mcm_repo_path"
      MCM_VERSION=$(go list -mod=mod -f '{{ .Version }}' -m "github.com/gardener/machine-controller-manager")
      local cloneCmd="git clone --branch "$MCM_VERSION" --depth 1 https://github.com/gardener/machine-controller-manager.git "$mcm_repo_path" --recursive"
      printf "Executing %s...\n" "$cloneCmd"
      eval $cloneCmd
    fi

    fetch_gna_secret_name
}

function check_running_machines() {
    MC_NUM=$(kubectl --kubeconfig=dev/control_kubeconfig.yaml -n $CONTROL_CLUSTER_NAMESPACE get mc --no-headers | wc -l)
    if [ "$MC_NUM" -ne 1 ]; then
        echo "Number of machines in the cluster are not what is expected. There might be another PR running its integration tests on this cluster. Kindly check and rerun your tests."
        exit 1
    fi
}

function check_cluster_state() {
    printf "\t\t\t----- Checking Test Environment -------\n"

    check_running_machines
    #wait in case some orphan resources are terminating
    sleep 30
    
    printf "\nCluster state looks clean\n"
    printf "\t\t\t----- Checking Test Environment DONE -------\n"
}

function scale_down_mcm() {
    echo "annotating deployment/machine-controller-manager with dependency-watchdog.gardener.cloud/ignore-scaling=true..."
    kubectl --kubeconfig=dev/control_kubeconfig.yaml -n $CONTROL_CLUSTER_NAMESPACE annotate --overwrite=true deployment/machine-controller-manager dependency-watchdog.gardener.cloud/ignore-scaling=true
    echo "scaling down deployment/machine-controller-manager to 0..."
    kubectl --kubeconfig=dev/control_kubeconfig.yaml -n $CONTROL_CLUSTER_NAMESPACE scale deployment/machine-controller-manager --replicas=0
}

function scale_up_mcm() {
    echo "annotating deployment/machine-controller-manager with dependency-watchdog.gardener.cloud/ignore-scaling=true..."
    kubectl --kubeconfig=dev/control_kubeconfig.yaml -n $CONTROL_CLUSTER_NAMESPACE annotate --overwrite=true deployment/machine-controller-manager dependency-watchdog.gardener.cloud/ignore-scaling-
    echo "scaling up deployment/machine-controller-manager to 1..."
    kubectl --kubeconfig=dev/control_kubeconfig.yaml -n $CONTROL_CLUSTER_NAMESPACE scale deployment/machine-controller-manager --replicas=1
}

############################################## </Initialization> ##############################################

############################################## <Modules> ########################################################

function run_integration_tests() {
    echo "Starting integration tests..."
    set +e

    ginkgo -v --show-node-events --poll-progress-after=300s --poll-progress-interval=60s test/integration/controller
    TEST_RESULT=$?
    
    set -e

    if [ ${TEST_RESULT} -ne 0 ]; then
        printf "\n\t\t\t${RED}Integration tests failed. Kindly check you PR${NC}\n"
    else
        printf "Done with integration test\n"
    fi
}

function print_controller_logs {
    printf "\n\t\t\t----- Start of MCM Logs -----------\n"
    cat $logs_path/mcm_process.log
    printf "\n\t\t\t----- End of MCM Logs   ----------\n\n"

    printf "\n\t\t\t----- Start of MC Logs -----------\n"
    cat $logs_path/mc_process.log
    printf "\n\t\t\t----- End of MC Logs   ----------\n\n"
}

############################################## </Modules> ########################################################


############################################## <Main> ########################################################

printf "\n\t\t\t----- Start of Test Script -----------\n"
install_dependencies
fetch_service_account_kubeconfig
fetch_oot_cluster_kubeconfig
fetch_control_cluster_kubeconfig
#if cluster state is not clean then don't run the tests
check_cluster_state
# sets up the environment for the tests
setup_environment
result=$?
if [ ${result} -ne 0 ]; then
exit $result
fi
scale_down_mcm
run_integration_tests
scale_up_mcm
print_controller_logs
printf "\n\t\t\t----- End of Test Script -----------\n"
printf "\n\t\t\t----- Exiting with TEST_RESULT: %s -----------\n" "$TEST_RESULT"

exit $TEST_RESULT

############################################## </Main> ########################################################
